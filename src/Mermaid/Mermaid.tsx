import * as React from 'react';
import * as mermaid from 'mermaid';

import { Theme } from 'mermaid';

// We need to disable mermaids start on load, because it is otherwise going to override the html
// generated by react.
mermaid.initialize({
    startOnLoad: false
});
/*
  dark: darkTheme,
  default: defaultTheme,
  forest: forestTheme,
  neutral: neutralTheme
*/

export interface MermaidState {
    diagram?: string;
}

export interface MermaidProps {
    name?: string | null;
    onSetRef?: (ref: HTMLDivElement | null) => void;
    style?: React.CSSProperties;
    onError?: (row: number, col: number, message: string) => void;
    onSuccess?: () => void;
    children: string;
    theme?: Theme;
}

export class Mermaid extends React.Component<MermaidProps, MermaidState> {
    static _validId = 0;
    state: MermaidState = {};

    componentWillReceiveProps(next: MermaidProps) {
        if (next.children !== this.props.children || next.theme !== this.props.theme) {
            this.renderDiagram(next);
        }
    }

    componentDidMount() {
        this.renderDiagram(this.props);
    }

    renderDiagram(props: MermaidProps) {
        const { children, onError = () => {/**/}, onSuccess = () => {/**/}, theme } = props;

        if (children === '') {
            return;
        }

        try {
            // In case the theme was updated.
            mermaid.initialize({
                startOnLoad: false,
                theme
            });

            mermaid.parse(children);
            mermaid.render(
                'mmm_react_' + Mermaid._validId++,
                children,
                (html: string) => {
                    this.setState({ diagram: html });
                    onSuccess();
                }
            );
        } catch (e) {
            onError(e.hash.loc.first_line, e.hash.loc.first_column, 'Expected: ' + e.hash.expected.join(' | '));
        }
    }

    render() {
        const { onSetRef, style } = this.props;
        return this.state.diagram
            ? <div
                className='mermaid'
                style={{ overflow: 'scroll', ...style }}
                dangerouslySetInnerHTML={{ __html: this.state.diagram }}
                ref={r => onSetRef && onSetRef(r)}
            />
            : null;
    }
}